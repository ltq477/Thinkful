{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of LinearClassifier Assignment Solution.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6I4eycOvylvk",
        "colab_type": "text"
      },
      "source": [
        "## Linear Classifiers\n",
        "In this assignment you will load a dataset and train a Logistic regression Classifier.\n",
        "\n",
        "### The Dataset\n",
        "This dataset is composed of a range of biomedical voice measurements from 31 people, 23 with Parkinson's disease (PD). Each column in the table is a particular voice measure, and each row corresponds one of 195 voice recording from these individuals (\"name\" column). The main aim of the data is to discriminate healthy people from those with PD, according to \"status\" column which is set to 0 for healthy and 1 for PD. \n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0yC0ZA6dy1QV",
        "colab_type": "text"
      },
      "source": [
        "### 1. Import necessary packages\n",
        "\n",
        "For this exercise we need\n",
        "\n",
        " - pandas\n",
        " - train_test_split\n",
        " - LogisticRegression\n",
        " - pyplot from matplotlib"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XTA2-4TWs-Od",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "%matplotlib inline"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_OzR2Q1mzNsj",
        "colab_type": "text"
      },
      "source": [
        "### 2. Load and prepare the dataset\n",
        "\n",
        "\n",
        "1.   Load the dataset into a dataframe named **df_data** (this step is done for you).\n",
        "2.   Drop the name column. This column is not a feature required by the model.\n",
        "3.   Create a dataframe named **X** containing all the columns except the status.\n",
        "4.   Create a dataframe named **y** containing the status.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YiVjEgccA2Jf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df_data = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/parkinsons/parkinsons.data')\n",
        "df_data = df_data.drop(['name'], axis=1)\n",
        "X = df_data.drop(['status'], axis=1)\n",
        "y = df_data['status']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f4J4svVN0Q-8",
        "colab_type": "text"
      },
      "source": [
        "### 3. Split the dataset into a training set and a test set"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WWB4ApBJCCOg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wdUpUqvx0Xy3",
        "colab_type": "text"
      },
      "source": [
        "### 4. Create the model\n",
        "\n",
        "\n",
        "1.   Instantiate a Logistic Regression classifier with a `lbfgs` solver and penalty set to 'none'.\n",
        "2.   Fit the classifier to the data.\n",
        "\n",
        "*If the algorithm fails to converge, what change can you make to fix that?*\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bJZKapCoBrbZ",
        "colab_type": "code",
        "outputId": "7fc2c52b-798d-4347-a6ea-36b313e456fd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        }
      },
      "source": [
        "lr = LogisticRegression(solver='lbfgs', penalty='none', max_iter=1000)\n",
        "lr.fit(X_train, y_train)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
              "                   intercept_scaling=1, l1_ratio=None, max_iter=1000,\n",
              "                   multi_class='warn', n_jobs=None, penalty='none',\n",
              "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
              "                   warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xPOOTwC81SEJ",
        "colab_type": "text"
      },
      "source": [
        "### 5. Calculate Accuracy\n",
        "Calculate and print the accuracy of the model on the test data."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mDb5eFMC1XwX",
        "colab_type": "code",
        "outputId": "2af56d5b-8b8c-45e8-aae6-acb8f6ebed6f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "lr_score = lr.score(X_test, y_test)\n",
        "\n",
        "print('Accuracy of Logistic Regression without regularization: {:.3f}'.format(lr_score))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy of Logistic Regression without regularization: 0.796\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4HZWaREW2lGw",
        "colab_type": "text"
      },
      "source": [
        "### 6. L2 Regularization\n",
        "Train another model with L2 regularization and compare the accuracy of the new model to the previous one.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VF_-VldG3A8I",
        "colab_type": "code",
        "outputId": "91938e2d-df58-46c4-e081-29901409841e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "lr = LogisticRegression(solver='lbfgs', penalty='l2', max_iter=1000)\n",
        "lr.fit(X_train, y_train)\n",
        "lr_score = lr.score(X_test, y_test)\n",
        "\n",
        "print('Accuracy of Logistic Regression with L2 regularization: {:.3f}'.format(lr_score))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy of Logistic Regression with L2 regularization: 0.796\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9LhZoke83cHD",
        "colab_type": "text"
      },
      "source": [
        "### 7. Choose the C parameter\n",
        "Use a loop to test the effect of varying the C parameter from 0.05 to 1.5 in increments of 0.5. Plot a graph to show the accuracy on the test data versus the accuracy on the training data. Select an appropriate value for C and explain why that may be the best value."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ddNMl7kN15N3",
        "colab_type": "code",
        "outputId": "a71c24e5-c5a2-431b-e4ed-08b89e70532c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        }
      },
      "source": [
        "c_vals = np.arange(0.05, 1.5, 0.05)\n",
        "test_accuracy = []\n",
        "train_accuracy = []\n",
        "\n",
        "for c in c_vals:\n",
        "  lr = LogisticRegression(solver='lbfgs', penalty='l2', C=c, max_iter=10000)\n",
        "  lr.fit(X_train, y_train)\n",
        "  test_accuracy.append(lr.score(X_test, y_test))\n",
        "  train_accuracy.append(lr.score(X_train, y_train))\n",
        "\n",
        "fig = plt.figure(figsize=(8, 4))\n",
        "ax1 = fig.add_subplot(1, 1, 1)\n",
        "ax1.plot(c_vals, test_accuracy, '-g', label='Test Accuracy')\n",
        "ax1.plot(c_vals, train_accuracy, '-b', label='Train Accuracy')\n",
        "ax1.set(xlabel='C', ylabel='Accuracy')\n",
        "ax1.set_title('Effect of C on Accuracy')\n",
        "ax1.legend()\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 576x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "39XAG5Ea4QEx",
        "colab_type": "text"
      },
      "source": [
        "From the graph above the best value for C occur between 1.3 and 1.5. This region minimizes the difference between the test and training accuracy implying the least amount of overfitting is occuring."
      ]
    }
  ]
}
© 2020 GitHub, Inc.